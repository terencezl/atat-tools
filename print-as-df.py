#! /bin/env python
import os
import argparse
import numpy as np
import pandas as pd
import atat_module
import matplotlib as mpl

pd.set_option('display.max_rows', None)

parser = argparse.ArgumentParser(
    description="Print the output of a file generated by a program in ATAT.")
parser.add_argument('-c', nargs='*', metavar='columns', help="the columns of the dataframe")
parser.add_argument('filetype',
    help="""supports outputs of emc2 and phb. Also can be gs (gs.out), fit (fit.out), predstr (predstr.out),
        and the mmaps counterparts mgs, mfit, mpredstr""")
parser.add_argument('filename', nargs='+', help="the actual file name, can be 1 or more.")
parser.add_argument('--sortby', help="the column name to sort")
parser.add_argument('--special', help='generated by mmaps? emc2 canonical mode? emc2 innerT?')

parser_emc2 = parser.add_argument_group('emc2')
# parser_emc2.add_argument('--innerT', action='store_true',
    # help="switch to make T the inner index to search for transition points (not for canonical mode)")
parser_emc2.add_argument('-T', nargs=2, metavar=('from', 'to'), type=float, default=[None, None],
    help="the starting and ending temperature index of the dataframe")
parser_emc2.add_argument('-mu', nargs=2, metavar=('from', 'to'), type=float, default=[None, None],
    help="the starting and ending mu index of the dataframe (not for canonical mode)")
parser_emc2.add_argument('--trans', action='store_true', help="get the transition points")
parser_emc2.add_argument('-p', action='store_true', help="display fig of variable vs mu")
parser_emc2.add_argument('-s', metavar='savefig_name', help="if specified, save fig to file")
parser_emc2.add_argument('--var', default='lro', help="the variable used to detecting abrupt changes")
parser_emc2.add_argument('--thres', type=float, default=0.5,
    help="threshold of detecting peaks of the variable derivative")
parser_emc2.add_argument('--min_dist', type=float, default=2,
    help="minimum distance of detecting peaks of the variable derivative")
parser_emc2.add_argument('--thres_abs', type=float, default=0.005,
    help="absolute threshold of detecting peaks of the variable derivative")
parser_emc2.add_argument('--bd_tol', type=float, default=0.3,
    help="tolerance of peak boundary of the variable derivative")
parser_emc2.add_argument('--return_single', action='store_true',
    help="return single peak, rather than however many it detects")

args = parser.parse_args()

if args.s and not args.p:
    mpl.use('Agg')
import matplotlib.pyplot as plt
plt.style.use('research')
plot = True if args.p or args.s else None

if args.filetype == 'emc2':
    df = pd.concat([atat_module.get_df('emc2', filename, special=args.special) for filename in args.filename])
    cm = True if args.special == 'cm' else False
    df = df.sort_index()
    idxsls = pd.IndexSlice
    if not cm:
        if args.special == 'innerT':
            df = df.loc[idxsls[args.mu[0]:args.mu[1], args.T[0]:args.T[1]], :]
        else:
            df = df.loc[idxsls[args.T[0]:args.T[1], args.mu[0]:args.mu[1]], :]
    else:
        df = df.loc[idxsls[:, args.T[0]:args.T[1]], :]

    if args.trans:
        df_trans = atat_module.get_emc2_transition(df, var=args.var, thres=args.thres,
            min_dist=args.min_dist, thres_abs=args.thres_abs, bd_tol=args.bd_tol, return_single=args.return_single, cm=cm, plot=plot)
        print(df_trans)
        if args.s:
            plt.savefig(args.s)
        if args.p:
            plt.show()
        exit()

    if not cm:
        columns = args.c if args.c else \
            ['lro', 'x', 'x_lte', 'x_mf', 'x_hte', 'phi', 'phi_lte', 'phi_mf', 'phi_hte']
        print(df[columns])
    else:
        columns = args.c if args.c else \
            ['lro', 'E', 'G', 'var(E)']
        print(df[columns])

else:
    df = atat_module.get_df(args.filetype, args.filename[0], special=args.special)
    if args.sortby:
        df.sort_values(by=args.sortby, inplace=True)
    if args.c:
        columns = args.c
        print(df[columns])
    else:
        print(df)
